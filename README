Final Project Folder for CS134c, Spring 2018.
[Student: please keep this file up-to-date.  Your grade depends on
 our ability to understand what your project has accomplished and
 how the software is used.]

Student Name: Youngsoo Baek
Mentor: Dzung Pham
Project Title: Rubik's Cube Game

1. Describe (briefly) the files and folders found in this project.
   README - this file, an overview of the project
   Contract.pdf - project proposal
   cube.py - Contains the class 'Cube' that represents a Rubik's Cube
   project.py - Contains functions needed to plot the Cube and run the Rubik's Cube game
   test_graphics.png - A test image of the Rubik's Cube graphics when project.py is run

2. Additional modules (beyond python3, pillow, matplotlib, requests, bs4)
   required by this software:
   - matplotlib submodules used include patches.
   - mplot3d (included in mpl_toolkits under matplotlib). Submodules used: art3d.
   - itertools (built-in module)

3. Demonstrable accomplishments of this project:
   - Representation of a 3x3 Rubik's cube 
   - A game in which user interactively manipulates the cube

4. Documentation of how CS134c staff would use your software to produce the
   results:
   - The game run by this program is a simple reproduction of manipulating Rubik's Cube in real life.
   A cube object is visualized, already shuffled in itself. The user can manipulate the cube through keyboard
   inputs. All moves, in Singmaster notation manner, rotate one of the six possible faces. The user can control
   the direction and the number of rotations to make.
   - If stuck, the user can choose to reshuffle the cube and begin a new round, or ask the program to give
   a solution at the current status (the series of moves to reach solution can be arbitrarily long).
   - More on the exact implementation of each moves for the Rubik's Cube can be seen in documentation of
   cube.py and project.py.

5. Additional comments:
   - The module is not without its irascible qualities, and certainly can be improved. In particular,
   the current 'solve' method is not really solving the cube, but simply returning the moves that the object has
   remembered when manipulating the cube. Finding which steps must be implemented for a search algorithm that
   can provide solution steps will be the next objective for this program.
